const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const fs = require('fs').promises;

let mainWindow;

function createWindow() {
  console.log('üñ•Ô∏è [MAIN] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á window...');
  
  mainWindow = new BrowserWindow({
    width: 1000,
    height: 700,
    webPreferences: {
      nodeIntegration: false,      // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
      contextIsolation: true,      // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢  
      preload: path.join(__dirname, 'preload.js')  // ‚úÖ ‡πÉ‡∏ä‡πâ preload
    }
  });

  mainWindow.loadFile('index.html');
  
  // ‡πÄ‡∏õ‡∏¥‡∏î DevTools ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π console
  mainWindow.webContents.openDevTools();
  
  console.log('‚úÖ [MAIN] ‡∏™‡∏£‡πâ‡∏≤‡∏á window ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

app.whenReady().then(() => {
  console.log('‚ö° [MAIN] Electron ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
  createWindow();
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// ===== IPC HANDLERS =====

// üì® Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
ipcMain.handle('send-message', (event, message) => {
  console.log('üì® [MAIN] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', message);
  
  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const response = {
    original: message,
    reply: `Server ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: "${message}"`,
    timestamp: new Date().toISOString(),
    status: 'success'
  };
  
  console.log('üì§ [MAIN] ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö:', response);
  return response;
});

// üëã Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
ipcMain.handle('say-hello', (event, name) => {
  console.log('üëã [MAIN] ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏Å‡∏±‡∏ö:', name);
  
  const greetings = [
    `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${name}! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Agent Wallboard`,
    `‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ ${name}! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?`,
    `Hello ${name}! ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏∞`,
  ];
  
  const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];
  
  return {
    greeting: randomGreeting,
    name: name,
    time: new Date().toLocaleString('th-TH'),
    agentCount: 3  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô agents ‡∏ó‡∏µ‡πà online
  };
});

console.log('üîß [MAIN] IPC Handlers ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');

// üìä Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents
ipcMain.handle('get-agents', async () => {
  console.log('üìä [MAIN] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents...');
  
  try {
    // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents
    const data = await fs.readFile('agent-data.json', 'utf8');
    const agentData = JSON.parse(data);
    
    console.log('‚úÖ [MAIN] ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return {
      success: true,
      data: agentData,
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('‚ùå [MAIN] Error ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    return {
      success: false,
      error: error.message
    };
  }
});

// üîÑ Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ agent
ipcMain.handle('change-agent-status', async (event, { agentId, newStatus }) => {
  console.log(`üîÑ [MAIN] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ agent ${agentId} ‡πÄ‡∏õ‡πá‡∏ô ${newStatus}`);
  
  try {
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const data = await fs.readFile('agent-data.json', 'utf8');
    const agentData = JSON.parse(data);
    
    // ‡∏´‡∏≤ agent ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const agent = agentData.agents.find(a => a.id === agentId);
      if (agent) {
        agent.status = newStatus;
        agent.lastStatusChange = new Date().toISOString();

        await fs.writeFile('agent-data.json', JSON.stringify(agentData, null, 2));
      
        console.log(`‚úÖ [MAIN] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${agentId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
            if (mainWindow) {
          const notificationPayload = {
              agentId: agent.id,
              agentName: agent.name,
              newStatus: newStatus,
              timestamp: agent.lastStatusChange
          };
        
          console.log('üîî [MAIN] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Notification ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
          mainWindow.webContents.send('agent-status-changed', notificationPayload);
      }
      return {
        success: true,
        agent: agent,
        message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${newStatus} ‡πÅ‡∏•‡πâ‡∏ß`
      };
    } else {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö agent ID: ${agentId}`);
    }
    
  } catch (error) {
    console.error('‚ùå [MAIN] Error ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
});

ipcMain.handle('agent-login', async (event, { agentId, password }) => {
  console.log(`üîê [MAIN] ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° Login Agent ID: ${agentId}`);

  try {
    const data = await fs.readFile('agent-data.json', 'utf8');
    const agentData = JSON.parse(data);

    const agent = agentData.agents.find(a => a.id === agentId);
    
    if (agent && password === '1234') {
      console.log(`‚úÖ [MAIN] Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${agentId}`);
      
      return {
        success: true,
        agent: {
          id: agent.id,
          name: agent.name,
          department: agent.department,
          status: agent.status
        },
        message: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö, ${agent.name}!`
      };
    } else {
      console.log(`‚ùå [MAIN] Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${agentId}`);
      throw new Error("Agent ID ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

  } catch (error) {
    console.error('‚ùå [MAIN] Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Login:', error);
    return {
      success: false,
      error: error.message
    };
  }
});